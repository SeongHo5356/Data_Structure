// Implementation file for Unsorted.h#include "unsorted.h"UnsortedType::UnsortedType(){  length = 0;}bool UnsortedType::IsFull() const{  return (length == MAX_ITEMS);}int UnsortedType::LengthIs() const{  return length;}void UnsortedType::RetrieveItem(ItemType& item, bool& found) // Pre:  Key member(s) of item is initialized. // Post: If found, item's key matches an element's key in the //       list and a copy of that element has been stored in item; //       otherwise, item is unchanged. {  bool moreToSearch;  int location = 0;  found = false;  moreToSearch = (location < length);  while (moreToSearch && !found)   {    switch (item.ComparedTo(info[location]))    {      case LESS    :       case GREATER : location++;                     moreToSearch = (location < length);                     break;      case EQUAL   : found = true;                     item = info[location];                     break;    }  }}void UnsortedType::InsertItem(ItemType item)// Post: item is in the list.{  info[length] = item;  length++;}void UnsortedType::DeleteItem(ItemType item)// Pre:  item's key has been initialized.//       An element in the list has a key that matches item's.// Post: No element in the list has a key that matches item's.{    int location = 0;    while (item.ComparedTo(info[location]) != EQUAL)        location++;    info[location] = info[length - 1];    length--;}void UnsortedType::DeleteItem_a(ItemType item) {//function: delete item from list//precondtion: an element in the list has a key that matches item's //postcondition: no element in the list has a key that matches item's//               if there isn't item, list stay still    bool deleted = false;    for (int i = 0; i < length && !deleted; i++) {        if (item.ComparedTo(info[i]) == EQUAL) {            info[i] = info[length - 1];            deleted = true; // deleted 플래그 값 설정         }    }}void UnsortedType::DeleteItem_c(ItemType item) {//function: delete item from the list//precondtion: an element in the list has a key that matches item's //postcondition: no element in the list has a key that matches item//               if there isn't item, list stay still    int i = 0;    while (i < length) {        if (item.ComparedTo(info[i]) == EQUAL) {            info[i] = info[length - 1];//해당 아이템 삭제            i--; // 삭제 후 현재 i위치의 값이 변경되었으므로 나중에 다시 확인 하도록 i값 변경하지 않음            length--; // length 값은 감소        }        else {            i++; //다음 값을 보기 위해서 i값 변경        }            }}void UnsortedType::ResetList()// Post: currentPos has been initialized.{  currentPos = -1;}void UnsortedType::GetNextItem(ItemType& item)// Post: item is current item.//       Current position has been updated.{  currentPos++;  item = info[currentPos];}bool UnsortedType::IsThere(ItemType& item) {    // Pre: List has been initialized    while (currentPos != length) {        if (item.ComparedTo(info[currentPos + 1]) == EQUAL) {            return true;        }        currentPos++;    }    return false;}